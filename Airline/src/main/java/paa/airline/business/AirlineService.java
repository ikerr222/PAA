package paa.airline.business;

import java.time.LocalDate;
import java.util.List;

import paa.airline.model.AircraftType;
import paa.airline.model.Airport;
import paa.airline.model.Flight;
import paa.airline.model.Ticket;

public interface AirlineService {
    /**
     * Inserts a new airport into the database according to the given parameters. If any parameter is not correct, this
     * method shall throw an AirlineServiceException <b>with an informative message</b>.
     *
     * @param iataCode code uniquely identifying the airport as specified by IATA. Must be exactly three uppercase letters.
     * @param cityName name of the city the airport serves. Must not be null or blank.
     * @param airportName name of the airport itself. Must not be null or blank.
     * @param longitude longitude coordinate of the airport. Must be in the interval [-180, 180].
     * @param latitude latitude interval of the airport. Must be in the range [-90, 90].
     * @return a {@link Airport} object.
     * @throws AirlineServiceException if any of the parameters does not conform to its specification
     */
    Airport createAirport(String iataCode, String cityName, String airportName, double longitude, double latitude) throws AirlineServiceException;

    /**
     * Gets a list of all airports present in the database.
     *
     * @return
     */
    List<Airport> listAirports();

    /**
     * Inserts a new aircraft type into the database according to the given parameters. If any parameter is not correct,
     * this method shall throw an AirlineServiceException <b>with an informative message</b>.
     *
     * @param manufacturer name of the manufacturer. Must not be null or blank.
     * @param model identification of the model. Must not be null or blank.
     * @param seatRows number of rows of seats in the aircraft. Must be positive and greater than {@code seatColumns}.
     * @param seatColumns number of columns of seats in the aircraft. Must be positive and lesser than {@code seatRows}.
     * @return a {@link AircraftType}  object with an autogenerated primary key
     * @throws AirlineServiceException if any of the parameters does not conform to its specification.
     */
    AircraftType createAircraft(String manufacturer, String model, int seatRows, int seatColumns) throws AirlineServiceException;

    /**
     * Gets a list of all aircraft types present in the database.
     *
     * @return
     */
    List<AircraftType> listAircraftTypes();

    /**
     * Schedules a regular daily flight between two specified airports, using the provided aircraft type. If any
     * parameter is not correct, this method shall throw an AirlineServiceException <b>with an informative message</b>.
     *
     * @param originAirportCode departure airport. Must exist in the database.
     * @param destinationAirportCode destination airport. Must exist in the database and be different from {@code originAirportCode}
     * @param aircraftTypeCode aircraft type to use in this flight. Must exist in the database.
     * @return a {@link Flight} object with autogenerated flight number.
     * @throws AirlineServiceException if any of the provided parameters does not exist in the database
     */
    Flight createFlight(String originAirportCode, String destinationAirportCode, Long aircraftTypeCode) throws AirlineServiceException;


    Flight findFlight(Long flightNumber);


    /**
     * Gets a list of all scheduled flights in the database.
     * @return
     */
    List<Flight> listFlights();

    /**
     * Issues a ticket for a given passenger in the specified flight and date.
     * <p>
     * This method must choose a random seat, which obviously has to be free (i.e., no other ticket must exist for
     * the same seat in the same flight and date. If no seats are available, this method shall throw an
     * AirlineServiceException <b>with an informative message</b>.
     * </p><p>
     * The price of the ticket (in cents) must be computed as
     * \(\mathrm{price}=\mathrm{round}\left(T(t, t_\mathrm{rush}) \cdot O(n, n_\textrm{max}) \cdot B(d)\right)\), where:
     * <ul>
     *     <li>
     *         \(T(t, t_\mathrm{rush})\) models the dependency of the price on when the ticket is bought. Normally,
     *         tickets are cheapest when bought well in advance, then their price rises as the flight date approaches
     *         and finally drops at the last minute because air carriers want to fill every last seat. We will model
     *         this behaviour as
     *
     *         $$T(t, t_\mathrm{rush}) =  \frac{\left(T_\mathrm{max} - 1\right) 7 t e^{\frac{1}{2} - \frac{49 t^2}{8 t_\mathrm{rush}^2}}}{2 t_\mathrm{rush}} + 1,$$
     *
     *         where \(t\) is the number of days remaining from {@code purchaseDate} until the date of the flight,
     *         \(t_\mathrm{rush}\) is the number of days before the date of the flight when prices start to rise, and
     *         \(T_\mathrm{max}\) is the maximum value the function will take (i.e., the number of times the price of
     *         the ticket will increase compared to the minimum price).
     *     </li>
     *     <li>
     *         \(O(n, n_\textrm{max})\) models the dependency of the price on the demand. The tickets for a particular
     *         flight become more expensive as the flight fills up, so that the first tickets are the cheapest and the
     *         last are the most expensive. We will model this behaviour as
     *
     *         $$O(n, n_\textrm{max}) = \frac{(1-O_\textrm{max})\cdot\cos\frac{n\pi}{n_\textrm{max}}+O_\textrm{max}+1}{2},$$
     *
     *         where \(n\) is the number of tickets already sold for this flight, \(n_\textrm{max}\) is the number of
     *         total seats in the aircraft, and \(O_\mathrm{max}\) is the maximum value the function will take (i.e.,
     *         the number of times the price of the ticket will increase compared to the minimum price).
     *     </li>
     *     <li>
     *         B(d) models the base price of the ticket, which will depend on the flight distance because more fuel is
     *         needed to fly farther. There is a fixed cost to cover ground operations and then the base price will
     *         increase linearly with distance. We will model this behaviour as
     *
     *         $$B(d) = 1000 + 10d,$$
     *
     *         where \(d\) is the flight distance in kilometers.
     *     </li>
     *     <li>
     *         Note that all the internal computations of the price of the ticket must be performed using floating-point
     *         numbers of {@code double} type, and only the final value has to be rounded into an integer.
     *     </li>
     * </ul>
     *
     *
     * @param firstName first name of the passenger. Must not be null or blank.
     * @param lastName last name of the passenger. Must not be null or blank.
     * @param flightNumber flight to issue a ticket for. Must exist in the database.
     * @param purchaseDate date of purchase. Must not be null cannot be after the flight date.
     * @param flightDate date of flight. Must not be null.
     * @return a {@link Ticket} object with autogenerated ticket number.
     * @throws AirlineServiceException if any of the parameters does not meet the specification or there are no available seats
     */
    Ticket purchaseTicket(String firstName, String lastName, Long flightNumber, LocalDate purchaseDate, LocalDate flightDate) throws AirlineServiceException;

    /**
     * Gets the number of available seats on a given flight and date.
     *
     * @param flightNumber flight to check available seats on. Must not be null.
     * @param flightDate date to check available seats on. Must not be null.
     * @return
     * @throws AirlineServiceException if the flight parameter is null or does not exist in the system.
     */
    int availableSeats(Long flightNumber, LocalDate flightDate) throws AirlineServiceException;

    /**
     * Cancels an existing ticket, deleting it from the database.
     *
     * @param ticketNumber ticket to cancel. Must not be null.
     * @param cancelDate date to try to cancel the ticket on. Must not be null.
     * @throws AirlineServiceException if the cancel date is not before the date of the flight, or the ticket does not exist.
     */
    void cancelTicket(Long ticketNumber, LocalDate cancelDate) throws AirlineServiceException;

    static final double tMax = 3;
    static final double tRush = 14;
    static final double oMax = 4;
}
